import{_ as t,a,b as r,ag as l}from"./chunks/framework.BcrMLAmg.js";const b=JSON.parse('{"title":"BaseElement","description":"","frontmatter":{},"headers":[],"relativePath":"references/elements/BaseElement.md","filePath":"references/elements/BaseElement.md","lastUpdated":1757844696000}'),n={name:"references/elements/BaseElement.md"};function s(d,e,o,i,c,h){return r(),a("div",null,e[0]||(e[0]=[l('<h1 id="baseelement" tabindex="-1">BaseElement <a class="header-anchor" href="#baseelement" aria-label="Permalink to &quot;BaseElement&quot;">​</a></h1><p><em>The base class for all UI elements in Basalt. This class provides basic properties and event handling functionality.</em></p><p>Extends: <code>PropertySystem</code></p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Property</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>type</td><td>string</td><td>BaseElement</td><td>The type identifier of the element</td></tr><tr><td>id</td><td>string</td><td>BaseElement</td><td>The unique identifier for the element</td></tr><tr><td>name</td><td>string</td><td>BaseElement</td><td>The name of the element</td></tr><tr><td>eventCallbacks</td><td>table</td><td>BaseElement</td><td>The event callbacks for the element</td></tr><tr><td>enabled</td><td>boolean</td><td>BaseElement</td><td>Whether the element is enabled or not</td></tr></tbody></table><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Method</th><th>Returns</th><th>Description</th></tr></thead><tbody><tr><td><a href="#baseelement-defineevent-class-eventname-requiredevent">BaseElement.defineEvent</a></td><td>-</td><td>Registers a new event listener for the element (on class level)</td></tr><tr><td><a href="#baseelement-registereventcallback-class-callbackname-string">BaseElement.registerEventCallback</a></td><td>-</td><td>Registers a new event callback for the element (on class level)</td></tr><tr><td><a href="#baseelement-istype-type">BaseElement:isType</a></td><td>boolean</td><td>Checks if the element is a specific type</td></tr><tr><td><a href="#baseelement-listenevent-eventname-enable">BaseElement:listenEvent</a></td><td>table</td><td>Enables or disables event listening for a specific event</td></tr><tr><td><a href="#baseelement-registercallback-event-callback">BaseElement:registerCallback</a></td><td>table</td><td>Registers a callback function</td></tr><tr><td><a href="#baseelement-fireevent-event-any">BaseElement:fireEvent</a></td><td>table</td><td>Triggers an event and calls all registered callbacks</td></tr><tr><td><a href="#baseelement-onchange-property-callback">BaseElement:onChange</a></td><td>table</td><td>Observes a property and calls a callback when it changes</td></tr><tr><td><a href="#baseelement-getbaseframe">BaseElement:getBaseFrame</a></td><td>BaseFrame</td><td>Returns the base frame of the element</td></tr><tr><td><a href="#baseelement-destroy">BaseElement:destroy</a></td><td>-</td><td>Destroys the element and cleans up all references</td></tr><tr><td><a href="#baseelement-updaterender">BaseElement:updateRender</a></td><td>table</td><td>Requests a render update for this element</td></tr></tbody></table><h2 id="baseelement-defineevent-class-eventname-requiredevent" tabindex="-1">BaseElement.defineEvent(class, eventName, requiredEvent?) <a class="header-anchor" href="#baseelement-defineevent-class-eventname-requiredevent" aria-label="Permalink to &quot;BaseElement.defineEvent(class, eventName, requiredEvent?)&quot;">​</a></h2><p>Registers a new event listener for the element (on class level)</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>class</code> <code>table</code> The class to register</li><li><code>eventName</code> <code>string</code> The name of the event to register</li><li><code>requiredEvent</code> <em>(optional)</em> <code>string</code> The name of the required event (optional)</li></ul><h2 id="baseelement-registereventcallback-class-callbackname-string" tabindex="-1">BaseElement.registerEventCallback(class, callbackName, string) <a class="header-anchor" href="#baseelement-registereventcallback-class-callbackname-string" aria-label="Permalink to &quot;BaseElement.registerEventCallback(class, callbackName, string)&quot;">​</a></h2><p>Registers a new event callback for the element (on class level)</p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>class</code> <code>table</code> The class to register</li><li><code>callbackName</code> <code>string</code> The name of the callback to register</li><li><code>string</code> <code>The</code> names of the events to register the callback for</li></ul><h2 id="baseelement-istype-type" tabindex="-1">BaseElement:isType(type) <a class="header-anchor" href="#baseelement-istype-type" aria-label="Permalink to &quot;BaseElement:isType(type)&quot;">​</a></h2><p>Checks if the element is a specific type</p><h3 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>type</code> <code>string</code> The type to check for</li></ul><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>boolean</code> <code>isType</code> Whether the element is of the specified type</li></ul><h2 id="baseelement-listenevent-eventname-enable" tabindex="-1">BaseElement:listenEvent(eventName, enable?) <a class="header-anchor" href="#baseelement-listenevent-eventname-enable" aria-label="Permalink to &quot;BaseElement:listenEvent(eventName, enable?)&quot;">​</a></h2><p>Enables or disables event listening for a specific event</p><h3 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>eventName</code> <code>string</code> The name of the event to listen for</li><li><code>enable</code> <em>(optional)</em> <code>boolean</code> Whether to enable or disable the event (default: true)</li></ul><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>table</code> <code>self</code> The BaseElement instance</li></ul><h2 id="baseelement-registercallback-event-callback" tabindex="-1">BaseElement:registerCallback(event, callback) <a class="header-anchor" href="#baseelement-registercallback-event-callback" aria-label="Permalink to &quot;BaseElement:registerCallback(event, callback)&quot;">​</a></h2><p>Registers a callback function for an event</p><h3 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>event</code> <code>string</code> The event to register the callback for</li><li><code>callback</code> <code>function</code> The callback function to register</li></ul><h3 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>table</code> <code>self</code> The BaseElement instance</li></ul><h2 id="baseelement-fireevent-event-any" tabindex="-1">BaseElement:fireEvent(event, any) <a class="header-anchor" href="#baseelement-fireevent-event-any" aria-label="Permalink to &quot;BaseElement:fireEvent(event, any)&quot;">​</a></h2><p>Triggers an event and calls all registered callbacks</p><h3 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>event</code> <code>string</code> The event to fire</li><li><code>any</code> <code>Additional</code> arguments to pass to the callbacks</li></ul><h3 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>table</code> <code>self</code> The BaseElement instance</li></ul><h2 id="baseelement-onchange-property-callback" tabindex="-1">BaseElement:onChange(property, callback) <a class="header-anchor" href="#baseelement-onchange-property-callback" aria-label="Permalink to &quot;BaseElement:onChange(property, callback)&quot;">​</a></h2><p>Observes a property and calls a callback when it changes</p><h3 id="parameters-6" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-6" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>property</code> <code>string</code> The property to observe</li><li><code>callback</code> <code>function</code> The callback to call when the property changes</li></ul><h3 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>table</code> <code>self</code> The BaseElement instance</li></ul><h2 id="baseelement-getbaseframe" tabindex="-1">BaseElement:getBaseFrame() <a class="header-anchor" href="#baseelement-getbaseframe" aria-label="Permalink to &quot;BaseElement:getBaseFrame()&quot;">​</a></h2><p>Returns the base frame of the element</p><h3 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>BaseFrame</code> <code>BaseFrame</code> The base frame of the element</li></ul><h2 id="baseelement-destroy" tabindex="-1">BaseElement:destroy() <a class="header-anchor" href="#baseelement-destroy" aria-label="Permalink to &quot;BaseElement:destroy()&quot;">​</a></h2><p>Destroys the element and cleans up all references</p><h2 id="baseelement-updaterender" tabindex="-1">BaseElement:updateRender() <a class="header-anchor" href="#baseelement-updaterender" aria-label="Permalink to &quot;BaseElement:updateRender()&quot;">​</a></h2><p>Requests a render update for this element</p><h3 id="returns-6" tabindex="-1">Returns <a class="header-anchor" href="#returns-6" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>table</code> <code>self</code> The BaseElement instance</li></ul>',55)]))}const u=t(n,[["render",s]]);export{b as __pageData,u as default};
