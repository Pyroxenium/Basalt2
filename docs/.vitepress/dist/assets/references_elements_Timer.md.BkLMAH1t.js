import{_ as t,a as r,b as a,ag as i}from"./chunks/framework.BcrMLAmg.js";const u=JSON.parse('{"title":"Timer","description":"","frontmatter":{},"headers":[],"relativePath":"references/elements/Timer.md","filePath":"references/elements/Timer.md","lastUpdated":1757844696000}'),s={name:"references/elements/Timer.md"};function d(n,e,o,l,h,m){return a(),r("div",null,e[0]||(e[0]=[i('<h1 id="timer" tabindex="-1">Timer <a class="header-anchor" href="#timer" aria-label="Permalink to &quot;Timer&quot;">​</a></h1><p><em>The Timer is a non-visual element that can be used to perform actions at specific intervals.</em></p><p>Extends: <code>BaseElement</code></p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Property</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>interval</td><td>number</td><td>1</td><td>The interval in seconds at which the timer will trigger its action.</td></tr><tr><td>action</td><td>function</td><td>function</td><td>The action to be performed when the timer triggers.</td></tr><tr><td>running</td><td>boolean</td><td>false</td><td>Indicates whether the timer is currently running or not.</td></tr><tr><td>amount</td><td>number</td><td>-1</td><td>The amount of time the timer should run.</td></tr></tbody></table><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Method</th><th>Returns</th><th>Description</th></tr></thead><tbody><tr><td><a href="#timer-start-self">Timer:start</a></td><td>Timer</td><td>Starts the timer</td></tr><tr><td><a href="#timer-stop-self">Timer:stop</a></td><td>Timer</td><td>Stops the timer</td></tr></tbody></table><h2 id="timer-start-self" tabindex="-1">Timer:start(self) <a class="header-anchor" href="#timer-start-self" aria-label="Permalink to &quot;Timer:start(self)&quot;">​</a></h2><p>Starts the timer with the specified interval.</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>self</code> <code>Timer</code> The Timer instance to start</li></ul><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>Timer</code> <code>self</code> The Timer instance</li></ul><h2 id="timer-stop-self" tabindex="-1">Timer:stop(self) <a class="header-anchor" href="#timer-stop-self" aria-label="Permalink to &quot;Timer:stop(self)&quot;">​</a></h2><p>Stops the timer if it is currently running.</p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>self</code> <code>Timer</code> The Timer instance to stop</li></ul><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>Timer</code> <code>self</code> The Timer instance</li></ul>',19)]))}const f=t(s,[["render",d]]);export{u as __pageData,f as default};
