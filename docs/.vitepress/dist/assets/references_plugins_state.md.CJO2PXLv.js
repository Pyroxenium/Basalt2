import{_ as a,a as t,b as s,ag as l}from"./chunks/framework.BcrMLAmg.js";const u=JSON.parse('{"title":"BaseFrame","description":"","frontmatter":{},"headers":[],"relativePath":"references/plugins/state.md","filePath":"references/plugins/state.md","lastUpdated":1757840145000}'),r={name:"references/plugins/state.md"};function n(o,e,d,i,c,m){return s(),t("div",null,e[0]||(e[0]=[l('<h1 id="baseframe" tabindex="-1">BaseFrame <a class="header-anchor" href="#baseframe" aria-label="Permalink to &quot;BaseFrame&quot;">​</a></h1><p>Extends: <code>Container</code></p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Method</th><th>Returns</th><th>Description</th></tr></thead><tbody><tr><td><a href="#baseframe-initializestate-self-name-default-persist-path">BaseFrame:initializeState</a></td><td>BaseFrame</td><td>Initializes a new state</td></tr></tbody></table><h2 id="baseframe-initializestate-self-name-default-persist-path" tabindex="-1">BaseFrame:initializeState(self, name, default, persist?, path?) <a class="header-anchor" href="#baseframe-initializestate-self-name-default-persist-path" aria-label="Permalink to &quot;BaseFrame:initializeState(self, name, default, persist?, path?)&quot;">​</a></h2><p>Initializes a new state for this element</p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>self</code> <code>BaseFrame</code> The element to initialize state for</li><li><code>name</code> <code>string</code> The name of the state</li><li><code>default</code> <code>any</code> The default value of the state</li><li><code>persist</code> <em>(optional)</em> <code>boolean</code> Whether to persist the state to disk</li><li><code>path</code> <em>(optional)</em> <code>string</code> Custom file path for persistence</li></ul><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>BaseFrame</code> <code>self</code> The element instance</li></ul><h1 id="baseelement" tabindex="-1">BaseElement <a class="header-anchor" href="#baseelement" aria-label="Permalink to &quot;BaseElement&quot;">​</a></h1><p><em>This is the state plugin. It provides a state management system for UI elements with support for</em><em>persistent states, computed states, and state sharing between elements.</em></p><h2 id="functions-1" tabindex="-1">Functions <a class="header-anchor" href="#functions-1" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Method</th><th>Returns</th><th>Description</th></tr></thead><tbody><tr><td><a href="#baseelement-setstate-self-name-value">BaseElement:setState</a></td><td>BaseElement</td><td>Sets a state value</td></tr><tr><td><a href="#baseelement-getstate-self-name">BaseElement:getState</a></td><td>any</td><td>Gets a state value</td></tr><tr><td><a href="#baseelement-onstatechange-self-statename-callback">BaseElement:onStateChange</a></td><td>BaseElement</td><td>Watches for state changes</td></tr><tr><td><a href="#baseelement-removestatechange-self-statename-callback">BaseElement:removeStateChange</a></td><td>BaseElement</td><td>Removes a state change observer</td></tr><tr><td><a href="#baseelement-bind-self-propertyname-statename">BaseElement:bind</a></td><td>BaseElement</td><td>Binds a property to a state</td></tr></tbody></table><h2 id="baseelement-setstate-self-name-value" tabindex="-1">BaseElement:setState(self, name, value) <a class="header-anchor" href="#baseelement-setstate-self-name-value" aria-label="Permalink to &quot;BaseElement:setState(self, name, value)&quot;">​</a></h2><p>Sets the value of a state</p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>self</code> <code>BaseElement</code> The element to set state for</li><li><code>name</code> <code>string</code> The name of the state</li><li><code>value</code> <code>any</code> The new value for the state</li></ul><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>BaseElement</code> <code>self</code> The element instance</li></ul><h2 id="baseelement-getstate-self-name" tabindex="-1">BaseElement:getState(self, name) <a class="header-anchor" href="#baseelement-getstate-self-name" aria-label="Permalink to &quot;BaseElement:getState(self, name)&quot;">​</a></h2><p>Gets the value of a state</p><h3 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>self</code> <code>BaseElement</code> The element to get state from</li><li><code>name</code> <code>string</code> The name of the state</li></ul><h3 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>any</code> <code>value</code> The current state value</li></ul><h2 id="baseelement-onstatechange-self-statename-callback" tabindex="-1">BaseElement:onStateChange(self, stateName, callback) <a class="header-anchor" href="#baseelement-onstatechange-self-statename-callback" aria-label="Permalink to &quot;BaseElement:onStateChange(self, stateName, callback)&quot;">​</a></h2><p>Registers a callback for state changes</p><h3 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>self</code> <code>BaseElement</code> The element to watch</li><li><code>stateName</code> <code>string</code> The state to watch</li><li><code>callback</code> <code>function</code> Called with (element, newValue, oldValue)</li></ul><h3 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>BaseElement</code> <code>self</code> The element instance</li></ul><h2 id="baseelement-removestatechange-self-statename-callback" tabindex="-1">BaseElement:removeStateChange(self, stateName, callback) <a class="header-anchor" href="#baseelement-removestatechange-self-statename-callback" aria-label="Permalink to &quot;BaseElement:removeStateChange(self, stateName, callback)&quot;">​</a></h2><p>Removes a state change observer</p><h3 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>self</code> <code>BaseElement</code> The element to remove observer from</li><li><code>stateName</code> <code>string</code> The state to remove observer from</li><li><code>callback</code> <code>function</code> The callback function to remove</li></ul><h3 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>BaseElement</code> <code>self</code> The element instance</li></ul><h2 id="baseelement-bind-self-propertyname-statename" tabindex="-1">BaseElement:bind(self, propertyName, stateName) <a class="header-anchor" href="#baseelement-bind-self-propertyname-statename" aria-label="Permalink to &quot;BaseElement:bind(self, propertyName, stateName)&quot;">​</a></h2><p>Binds a property to a state</p><h3 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><ul><li><code>self</code> <code>BaseElement</code> The element to bind</li><li><code>propertyName</code> <code>string</code> The property to bind</li><li><code>stateName</code> <code>string</code> The state to bind to (optional, uses propertyName if not provided)</li></ul><h3 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><ul><li><code>BaseElement</code> <code>self</code> The element instance</li></ul>',44)]))}const f=a(r,[["render",n]]);export{u as __pageData,f as default};
